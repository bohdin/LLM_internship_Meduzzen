import json
import os
from datetime import datetime

from openai import OpenAI


def get_transcription(client: OpenAI, audio_path: str) -> str:
    """
    Transcribe an audio file using OpenAI's Whisper model and format it with timestamps

    Args:
        client (OpenAI): An initialized OpenAI client
        audio_path (str): Path to the audio file

    Returns:
        str: A formatted transcription string with timestamps
    """
    with open(audio_path, "rb") as audio_file:
        transcription = client.audio.transcriptions.create(
            file=audio_file,
            model="whisper-1",
            response_format="verbose_json"
        )

        result = ""
        for segment in transcription.segments:
            start = segment.start
            end = segment.end
            text = segment.text
            result += f"[{start:.2f}s - {end:.2f}s]: {text}\n"
        return result


def get_gpt_response(client: OpenAI, model_name: str, system_prompt: str, transcription: str) -> str:
    """
    Send a transcription to a GPT model with system instructions and return the response

    Args:
        client (OpenAI): An initialized OpenAI client
        model_name (str): Name of the GPT model
        system_prompt (str): Instruction for GPT
        transcription (str): Transcript of audio content

    Returns:
        str: The response based on the system prompt and transcription
    """
    response = client.chat.completions.create(
    model=model_name,
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": transcription}
        ]
    )
    return response.choices[0].message.content



def transcripts_and_summaries_log(mode: str, prompt: str, transcript: str, summary: str) -> None:
    """
    Save transcript, GPT prompt, and summary result to a JSON log file

    Args:
        mode (str): The selected processing mode ("summary", "extract_keywords", "generate_title", "custom")
        prompt (str): The GPT prompt used to generate the output
        transcript (str): The full transcribed text of the audio file
        summary (str): The response generated by the GPT model based on the transcript and prompt
    """
    os.makedirs("logs", exist_ok=True)

    log_data = {
        "mode": mode,
        "prompt": prompt,
        "transcript": transcript,
        "summary": summary
    }

    current_date = datetime.now().strftime("%Y-%m-%d")
    file_name = f"logs/{current_date}.json"

    data = []

    if os.path.exists(file_name):
        with open(file_name, "r", encoding="utf-8") as f:
            try:
                existing_data = json.load(f)
                if isinstance(existing_data, list):
                    data += existing_data
                else:
                    data.append(existing_data)
            except json.JSONDecodeError: # if file empty
                pass

    data.append(log_data)
    
    with open(file_name, "w", encoding="utf-8") as f:
         json.dump(data, f, indent=2)
